'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Administracion")>  _
Partial Public Class DC_AdminDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCLIENTES(instance As CLIENTES)
    End Sub
  Partial Private Sub UpdateCLIENTES(instance As CLIENTES)
    End Sub
  Partial Private Sub DeleteCLIENTES(instance As CLIENTES)
    End Sub
  Partial Private Sub InsertVENTAS(instance As VENTAS)
    End Sub
  Partial Private Sub UpdateVENTAS(instance As VENTAS)
    End Sub
  Partial Private Sub DeleteVENTAS(instance As VENTAS)
    End Sub
  Partial Private Sub InsertDEPOSITOS(instance As DEPOSITOS)
    End Sub
  Partial Private Sub UpdateDEPOSITOS(instance As DEPOSITOS)
    End Sub
  Partial Private Sub DeleteDEPOSITOS(instance As DEPOSITOS)
    End Sub
  Partial Private Sub InsertEQUIPOS_X_SERVICIOS(instance As EQUIPOS_X_SERVICIOS)
    End Sub
  Partial Private Sub UpdateEQUIPOS_X_SERVICIOS(instance As EQUIPOS_X_SERVICIOS)
    End Sub
  Partial Private Sub DeleteEQUIPOS_X_SERVICIOS(instance As EQUIPOS_X_SERVICIOS)
    End Sub
  Partial Private Sub InsertFORMAS_DE_PAGO(instance As FORMAS_DE_PAGO)
    End Sub
  Partial Private Sub UpdateFORMAS_DE_PAGO(instance As FORMAS_DE_PAGO)
    End Sub
  Partial Private Sub DeleteFORMAS_DE_PAGO(instance As FORMAS_DE_PAGO)
    End Sub
  Partial Private Sub InsertPROD_X_VTA(instance As PROD_X_VTA)
    End Sub
  Partial Private Sub UpdatePROD_X_VTA(instance As PROD_X_VTA)
    End Sub
  Partial Private Sub DeletePROD_X_VTA(instance As PROD_X_VTA)
    End Sub
  Partial Private Sub InsertPRODUCTOS(instance As PRODUCTOS)
    End Sub
  Partial Private Sub UpdatePRODUCTOS(instance As PRODUCTOS)
    End Sub
  Partial Private Sub DeletePRODUCTOS(instance As PRODUCTOS)
    End Sub
  Partial Private Sub InsertPRODUCTOS_TIPOS(instance As PRODUCTOS_TIPOS)
    End Sub
  Partial Private Sub UpdatePRODUCTOS_TIPOS(instance As PRODUCTOS_TIPOS)
    End Sub
  Partial Private Sub DeletePRODUCTOS_TIPOS(instance As PRODUCTOS_TIPOS)
    End Sub
  Partial Private Sub InsertPROVEEDORES(instance As PROVEEDORES)
    End Sub
  Partial Private Sub UpdatePROVEEDORES(instance As PROVEEDORES)
    End Sub
  Partial Private Sub DeletePROVEEDORES(instance As PROVEEDORES)
    End Sub
  Partial Private Sub InsertSERVICIOS(instance As SERVICIOS)
    End Sub
  Partial Private Sub UpdateSERVICIOS(instance As SERVICIOS)
    End Sub
  Partial Private Sub DeleteSERVICIOS(instance As SERVICIOS)
    End Sub
  Partial Private Sub InsertUSUARIOS(instance As USUARIOS)
    End Sub
  Partial Private Sub UpdateUSUARIOS(instance As USUARIOS)
    End Sub
  Partial Private Sub DeleteUSUARIOS(instance As USUARIOS)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.WindowsApplication1.My.MySettings.Default.AdministracionConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property CLIENTES() As System.Data.Linq.Table(Of CLIENTES)
		Get
			Return Me.GetTable(Of CLIENTES)
		End Get
	End Property
	
	Public ReadOnly Property VENTAS() As System.Data.Linq.Table(Of VENTAS)
		Get
			Return Me.GetTable(Of VENTAS)
		End Get
	End Property
	
	Public ReadOnly Property DEPOSITOS() As System.Data.Linq.Table(Of DEPOSITOS)
		Get
			Return Me.GetTable(Of DEPOSITOS)
		End Get
	End Property
	
	Public ReadOnly Property EQUIPOS_X_SERVICIOS() As System.Data.Linq.Table(Of EQUIPOS_X_SERVICIOS)
		Get
			Return Me.GetTable(Of EQUIPOS_X_SERVICIOS)
		End Get
	End Property
	
	Public ReadOnly Property FORMAS_DE_PAGO() As System.Data.Linq.Table(Of FORMAS_DE_PAGO)
		Get
			Return Me.GetTable(Of FORMAS_DE_PAGO)
		End Get
	End Property
	
	Public ReadOnly Property PROD_X_VTA() As System.Data.Linq.Table(Of PROD_X_VTA)
		Get
			Return Me.GetTable(Of PROD_X_VTA)
		End Get
	End Property
	
	Public ReadOnly Property PRODUCTOS() As System.Data.Linq.Table(Of PRODUCTOS)
		Get
			Return Me.GetTable(Of PRODUCTOS)
		End Get
	End Property
	
	Public ReadOnly Property PRODUCTOS_TIPOS() As System.Data.Linq.Table(Of PRODUCTOS_TIPOS)
		Get
			Return Me.GetTable(Of PRODUCTOS_TIPOS)
		End Get
	End Property
	
	Public ReadOnly Property PROVEEDORES() As System.Data.Linq.Table(Of PROVEEDORES)
		Get
			Return Me.GetTable(Of PROVEEDORES)
		End Get
	End Property
	
	Public ReadOnly Property SERVICIOS() As System.Data.Linq.Table(Of SERVICIOS)
		Get
			Return Me.GetTable(Of SERVICIOS)
		End Get
	End Property
	
	Public ReadOnly Property USUARIOS() As System.Data.Linq.Table(Of USUARIOS)
		Get
			Return Me.GetTable(Of USUARIOS)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CLIENTES")>  _
Partial Public Class CLIENTES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_CLIENTE As Integer
	
	Private _CLI_NOMBRES As String
	
	Private _CLI_APELLIDO As String
	
	Private _CLI_DNI As String
	
	Private _CLI_DIRECCION As String
	
	Private _CLI_LOCALIDAD As String
	
	Private _CLI_TEL_1 As String
	
	Private _CLI_TEL_2 As String
	
	Private _CLI_MAIL As String
	
	Private _CLI_TIPO As String
	
	Private _CLI_CONTRATO As String
	
	Private _CLI_FECHA_ALTA As System.Nullable(Of Date)
	
	Private _SERVICIOS As EntitySet(Of SERVICIOS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_CLIENTEChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_CLIENTEChanged()
    End Sub
    Partial Private Sub OnCLI_NOMBRESChanging(value As String)
    End Sub
    Partial Private Sub OnCLI_NOMBRESChanged()
    End Sub
    Partial Private Sub OnCLI_APELLIDOChanging(value As String)
    End Sub
    Partial Private Sub OnCLI_APELLIDOChanged()
    End Sub
    Partial Private Sub OnCLI_DNIChanging(value As String)
    End Sub
    Partial Private Sub OnCLI_DNIChanged()
    End Sub
    Partial Private Sub OnCLI_DIRECCIONChanging(value As String)
    End Sub
    Partial Private Sub OnCLI_DIRECCIONChanged()
    End Sub
    Partial Private Sub OnCLI_LOCALIDADChanging(value As String)
    End Sub
    Partial Private Sub OnCLI_LOCALIDADChanged()
    End Sub
    Partial Private Sub OnCLI_TEL_1Changing(value As String)
    End Sub
    Partial Private Sub OnCLI_TEL_1Changed()
    End Sub
    Partial Private Sub OnCLI_TEL_2Changing(value As String)
    End Sub
    Partial Private Sub OnCLI_TEL_2Changed()
    End Sub
    Partial Private Sub OnCLI_MAILChanging(value As String)
    End Sub
    Partial Private Sub OnCLI_MAILChanged()
    End Sub
    Partial Private Sub OnCLI_TIPOChanging(value As String)
    End Sub
    Partial Private Sub OnCLI_TIPOChanged()
    End Sub
    Partial Private Sub OnCLI_CONTRATOChanging(value As String)
    End Sub
    Partial Private Sub OnCLI_CONTRATOChanged()
    End Sub
    Partial Private Sub OnCLI_FECHA_ALTAChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCLI_FECHA_ALTAChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SERVICIOS = New EntitySet(Of SERVICIOS)(AddressOf Me.attach_SERVICIOS, AddressOf Me.detach_SERVICIOS)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_CLIENTE", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_CLIENTE() As Integer
		Get
			Return Me._ID_CLIENTE
		End Get
		Set
			If ((Me._ID_CLIENTE = value)  _
						= false) Then
				Me.OnID_CLIENTEChanging(value)
				Me.SendPropertyChanging
				Me._ID_CLIENTE = value
				Me.SendPropertyChanged("ID_CLIENTE")
				Me.OnID_CLIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLI_NOMBRES", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property CLI_NOMBRES() As String
		Get
			Return Me._CLI_NOMBRES
		End Get
		Set
			If (String.Equals(Me._CLI_NOMBRES, value) = false) Then
				Me.OnCLI_NOMBRESChanging(value)
				Me.SendPropertyChanging
				Me._CLI_NOMBRES = value
				Me.SendPropertyChanged("CLI_NOMBRES")
				Me.OnCLI_NOMBRESChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLI_APELLIDO", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property CLI_APELLIDO() As String
		Get
			Return Me._CLI_APELLIDO
		End Get
		Set
			If (String.Equals(Me._CLI_APELLIDO, value) = false) Then
				Me.OnCLI_APELLIDOChanging(value)
				Me.SendPropertyChanging
				Me._CLI_APELLIDO = value
				Me.SendPropertyChanged("CLI_APELLIDO")
				Me.OnCLI_APELLIDOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLI_DNI", DbType:="Char(8) NOT NULL", CanBeNull:=false)>  _
	Public Property CLI_DNI() As String
		Get
			Return Me._CLI_DNI
		End Get
		Set
			If (String.Equals(Me._CLI_DNI, value) = false) Then
				Me.OnCLI_DNIChanging(value)
				Me.SendPropertyChanging
				Me._CLI_DNI = value
				Me.SendPropertyChanged("CLI_DNI")
				Me.OnCLI_DNIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLI_DIRECCION", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CLI_DIRECCION() As String
		Get
			Return Me._CLI_DIRECCION
		End Get
		Set
			If (String.Equals(Me._CLI_DIRECCION, value) = false) Then
				Me.OnCLI_DIRECCIONChanging(value)
				Me.SendPropertyChanging
				Me._CLI_DIRECCION = value
				Me.SendPropertyChanged("CLI_DIRECCION")
				Me.OnCLI_DIRECCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLI_LOCALIDAD", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property CLI_LOCALIDAD() As String
		Get
			Return Me._CLI_LOCALIDAD
		End Get
		Set
			If (String.Equals(Me._CLI_LOCALIDAD, value) = false) Then
				Me.OnCLI_LOCALIDADChanging(value)
				Me.SendPropertyChanging
				Me._CLI_LOCALIDAD = value
				Me.SendPropertyChanged("CLI_LOCALIDAD")
				Me.OnCLI_LOCALIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLI_TEL_1", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property CLI_TEL_1() As String
		Get
			Return Me._CLI_TEL_1
		End Get
		Set
			If (String.Equals(Me._CLI_TEL_1, value) = false) Then
				Me.OnCLI_TEL_1Changing(value)
				Me.SendPropertyChanging
				Me._CLI_TEL_1 = value
				Me.SendPropertyChanged("CLI_TEL_1")
				Me.OnCLI_TEL_1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLI_TEL_2", DbType:="VarChar(15)")>  _
	Public Property CLI_TEL_2() As String
		Get
			Return Me._CLI_TEL_2
		End Get
		Set
			If (String.Equals(Me._CLI_TEL_2, value) = false) Then
				Me.OnCLI_TEL_2Changing(value)
				Me.SendPropertyChanging
				Me._CLI_TEL_2 = value
				Me.SendPropertyChanged("CLI_TEL_2")
				Me.OnCLI_TEL_2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLI_MAIL", DbType:="VarChar(50)")>  _
	Public Property CLI_MAIL() As String
		Get
			Return Me._CLI_MAIL
		End Get
		Set
			If (String.Equals(Me._CLI_MAIL, value) = false) Then
				Me.OnCLI_MAILChanging(value)
				Me.SendPropertyChanging
				Me._CLI_MAIL = value
				Me.SendPropertyChanged("CLI_MAIL")
				Me.OnCLI_MAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLI_TIPO", DbType:="VarChar(10)")>  _
	Public Property CLI_TIPO() As String
		Get
			Return Me._CLI_TIPO
		End Get
		Set
			If (String.Equals(Me._CLI_TIPO, value) = false) Then
				Me.OnCLI_TIPOChanging(value)
				Me.SendPropertyChanging
				Me._CLI_TIPO = value
				Me.SendPropertyChanged("CLI_TIPO")
				Me.OnCLI_TIPOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLI_CONTRATO", DbType:="VarChar(10)")>  _
	Public Property CLI_CONTRATO() As String
		Get
			Return Me._CLI_CONTRATO
		End Get
		Set
			If (String.Equals(Me._CLI_CONTRATO, value) = false) Then
				Me.OnCLI_CONTRATOChanging(value)
				Me.SendPropertyChanging
				Me._CLI_CONTRATO = value
				Me.SendPropertyChanged("CLI_CONTRATO")
				Me.OnCLI_CONTRATOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CLI_FECHA_ALTA", DbType:="Date")>  _
	Public Property CLI_FECHA_ALTA() As System.Nullable(Of Date)
		Get
			Return Me._CLI_FECHA_ALTA
		End Get
		Set
			If (Me._CLI_FECHA_ALTA.Equals(value) = false) Then
				Me.OnCLI_FECHA_ALTAChanging(value)
				Me.SendPropertyChanging
				Me._CLI_FECHA_ALTA = value
				Me.SendPropertyChanged("CLI_FECHA_ALTA")
				Me.OnCLI_FECHA_ALTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CLIENTES_SERVICIOS", Storage:="_SERVICIOS", ThisKey:="ID_CLIENTE", OtherKey:="ID_CLIENTE")>  _
	Public Property SERVICIOS() As EntitySet(Of SERVICIOS)
		Get
			Return Me._SERVICIOS
		End Get
		Set
			Me._SERVICIOS.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SERVICIOS(ByVal entity As SERVICIOS)
		Me.SendPropertyChanging
		entity.CLIENTES = Me
	End Sub
	
	Private Sub detach_SERVICIOS(ByVal entity As SERVICIOS)
		Me.SendPropertyChanging
		entity.CLIENTES = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VENTAS")>  _
Partial Public Class VENTAS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_VENTA As Integer
	
	Private _VENT_FECHA As Date
	
	Private _VENT_SUBTOTAL As Decimal
	
	Private _VENT_TOTAL As Decimal
	
	Private _VENT_CANTIDAD As Integer
	
	Private _ID_FORM_DE_PAGO As Integer
	
	Private _ID_CLIENTE As System.Nullable(Of Integer)
	
	Private _PROD_X_VTA As EntitySet(Of PROD_X_VTA)
	
	Private _FORMAS_DE_PAGO As EntityRef(Of FORMAS_DE_PAGO)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_VENTAChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_VENTAChanged()
    End Sub
    Partial Private Sub OnVENT_FECHAChanging(value As Date)
    End Sub
    Partial Private Sub OnVENT_FECHAChanged()
    End Sub
    Partial Private Sub OnVENT_SUBTOTALChanging(value As Decimal)
    End Sub
    Partial Private Sub OnVENT_SUBTOTALChanged()
    End Sub
    Partial Private Sub OnVENT_TOTALChanging(value As Decimal)
    End Sub
    Partial Private Sub OnVENT_TOTALChanged()
    End Sub
    Partial Private Sub OnVENT_CANTIDADChanging(value As Integer)
    End Sub
    Partial Private Sub OnVENT_CANTIDADChanged()
    End Sub
    Partial Private Sub OnID_FORM_DE_PAGOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_FORM_DE_PAGOChanged()
    End Sub
    Partial Private Sub OnID_CLIENTEChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnID_CLIENTEChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PROD_X_VTA = New EntitySet(Of PROD_X_VTA)(AddressOf Me.attach_PROD_X_VTA, AddressOf Me.detach_PROD_X_VTA)
		Me._FORMAS_DE_PAGO = CType(Nothing, EntityRef(Of FORMAS_DE_PAGO))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_VENTA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_VENTA() As Integer
		Get
			Return Me._ID_VENTA
		End Get
		Set
			If ((Me._ID_VENTA = value)  _
						= false) Then
				Me.OnID_VENTAChanging(value)
				Me.SendPropertyChanging
				Me._ID_VENTA = value
				Me.SendPropertyChanged("ID_VENTA")
				Me.OnID_VENTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VENT_FECHA", DbType:="Date NOT NULL")>  _
	Public Property VENT_FECHA() As Date
		Get
			Return Me._VENT_FECHA
		End Get
		Set
			If ((Me._VENT_FECHA = value)  _
						= false) Then
				Me.OnVENT_FECHAChanging(value)
				Me.SendPropertyChanging
				Me._VENT_FECHA = value
				Me.SendPropertyChanged("VENT_FECHA")
				Me.OnVENT_FECHAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VENT_SUBTOTAL", DbType:="Decimal(7,2) NOT NULL")>  _
	Public Property VENT_SUBTOTAL() As Decimal
		Get
			Return Me._VENT_SUBTOTAL
		End Get
		Set
			If ((Me._VENT_SUBTOTAL = value)  _
						= false) Then
				Me.OnVENT_SUBTOTALChanging(value)
				Me.SendPropertyChanging
				Me._VENT_SUBTOTAL = value
				Me.SendPropertyChanged("VENT_SUBTOTAL")
				Me.OnVENT_SUBTOTALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VENT_TOTAL", DbType:="Decimal(7,2) NOT NULL")>  _
	Public Property VENT_TOTAL() As Decimal
		Get
			Return Me._VENT_TOTAL
		End Get
		Set
			If ((Me._VENT_TOTAL = value)  _
						= false) Then
				Me.OnVENT_TOTALChanging(value)
				Me.SendPropertyChanging
				Me._VENT_TOTAL = value
				Me.SendPropertyChanged("VENT_TOTAL")
				Me.OnVENT_TOTALChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VENT_CANTIDAD", DbType:="Int NOT NULL")>  _
	Public Property VENT_CANTIDAD() As Integer
		Get
			Return Me._VENT_CANTIDAD
		End Get
		Set
			If ((Me._VENT_CANTIDAD = value)  _
						= false) Then
				Me.OnVENT_CANTIDADChanging(value)
				Me.SendPropertyChanging
				Me._VENT_CANTIDAD = value
				Me.SendPropertyChanged("VENT_CANTIDAD")
				Me.OnVENT_CANTIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FORM_DE_PAGO", DbType:="Int NOT NULL")>  _
	Public Property ID_FORM_DE_PAGO() As Integer
		Get
			Return Me._ID_FORM_DE_PAGO
		End Get
		Set
			If ((Me._ID_FORM_DE_PAGO = value)  _
						= false) Then
				If Me._FORMAS_DE_PAGO.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_FORM_DE_PAGOChanging(value)
				Me.SendPropertyChanging
				Me._ID_FORM_DE_PAGO = value
				Me.SendPropertyChanged("ID_FORM_DE_PAGO")
				Me.OnID_FORM_DE_PAGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_CLIENTE", DbType:="Int")>  _
	Public Property ID_CLIENTE() As System.Nullable(Of Integer)
		Get
			Return Me._ID_CLIENTE
		End Get
		Set
			If (Me._ID_CLIENTE.Equals(value) = false) Then
				Me.OnID_CLIENTEChanging(value)
				Me.SendPropertyChanging
				Me._ID_CLIENTE = value
				Me.SendPropertyChanged("ID_CLIENTE")
				Me.OnID_CLIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VENTAS_PROD_X_VTA", Storage:="_PROD_X_VTA", ThisKey:="ID_VENTA", OtherKey:="ID_VENTA")>  _
	Public Property PROD_X_VTA() As EntitySet(Of PROD_X_VTA)
		Get
			Return Me._PROD_X_VTA
		End Get
		Set
			Me._PROD_X_VTA.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMAS_DE_PAGO_VENTAS", Storage:="_FORMAS_DE_PAGO", ThisKey:="ID_FORM_DE_PAGO", OtherKey:="ID_FORM_DE_PAGO", IsForeignKey:=true)>  _
	Public Property FORMAS_DE_PAGO() As FORMAS_DE_PAGO
		Get
			Return Me._FORMAS_DE_PAGO.Entity
		End Get
		Set
			Dim previousValue As FORMAS_DE_PAGO = Me._FORMAS_DE_PAGO.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FORMAS_DE_PAGO.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FORMAS_DE_PAGO.Entity = Nothing
					previousValue.VENTAS.Remove(Me)
				End If
				Me._FORMAS_DE_PAGO.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.VENTAS.Add(Me)
					Me._ID_FORM_DE_PAGO = value.ID_FORM_DE_PAGO
				Else
					Me._ID_FORM_DE_PAGO = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("FORMAS_DE_PAGO")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PROD_X_VTA(ByVal entity As PROD_X_VTA)
		Me.SendPropertyChanging
		entity.VENTAS = Me
	End Sub
	
	Private Sub detach_PROD_X_VTA(ByVal entity As PROD_X_VTA)
		Me.SendPropertyChanging
		entity.VENTAS = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DEPOSITOS")>  _
Partial Public Class DEPOSITOS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_DEPOSITO As Integer
	
	Private _DEPO_NOMBRE As String
	
	Private _DEPO_DIRECCION As String
	
	Private _DEPO_LOCALIDAD As String
	
	Private _DEPO_CODIGO As String
	
	Private _PRODUCTOS As EntitySet(Of PRODUCTOS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_DEPOSITOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_DEPOSITOChanged()
    End Sub
    Partial Private Sub OnDEPO_NOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnDEPO_NOMBREChanged()
    End Sub
    Partial Private Sub OnDEPO_DIRECCIONChanging(value As String)
    End Sub
    Partial Private Sub OnDEPO_DIRECCIONChanged()
    End Sub
    Partial Private Sub OnDEPO_LOCALIDADChanging(value As String)
    End Sub
    Partial Private Sub OnDEPO_LOCALIDADChanged()
    End Sub
    Partial Private Sub OnDEPO_CODIGOChanging(value As String)
    End Sub
    Partial Private Sub OnDEPO_CODIGOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PRODUCTOS = New EntitySet(Of PRODUCTOS)(AddressOf Me.attach_PRODUCTOS, AddressOf Me.detach_PRODUCTOS)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_DEPOSITO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_DEPOSITO() As Integer
		Get
			Return Me._ID_DEPOSITO
		End Get
		Set
			If ((Me._ID_DEPOSITO = value)  _
						= false) Then
				Me.OnID_DEPOSITOChanging(value)
				Me.SendPropertyChanging
				Me._ID_DEPOSITO = value
				Me.SendPropertyChanged("ID_DEPOSITO")
				Me.OnID_DEPOSITOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEPO_NOMBRE", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DEPO_NOMBRE() As String
		Get
			Return Me._DEPO_NOMBRE
		End Get
		Set
			If (String.Equals(Me._DEPO_NOMBRE, value) = false) Then
				Me.OnDEPO_NOMBREChanging(value)
				Me.SendPropertyChanging
				Me._DEPO_NOMBRE = value
				Me.SendPropertyChanged("DEPO_NOMBRE")
				Me.OnDEPO_NOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEPO_DIRECCION", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property DEPO_DIRECCION() As String
		Get
			Return Me._DEPO_DIRECCION
		End Get
		Set
			If (String.Equals(Me._DEPO_DIRECCION, value) = false) Then
				Me.OnDEPO_DIRECCIONChanging(value)
				Me.SendPropertyChanging
				Me._DEPO_DIRECCION = value
				Me.SendPropertyChanged("DEPO_DIRECCION")
				Me.OnDEPO_DIRECCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEPO_LOCALIDAD", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DEPO_LOCALIDAD() As String
		Get
			Return Me._DEPO_LOCALIDAD
		End Get
		Set
			If (String.Equals(Me._DEPO_LOCALIDAD, value) = false) Then
				Me.OnDEPO_LOCALIDADChanging(value)
				Me.SendPropertyChanging
				Me._DEPO_LOCALIDAD = value
				Me.SendPropertyChanged("DEPO_LOCALIDAD")
				Me.OnDEPO_LOCALIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DEPO_CODIGO", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property DEPO_CODIGO() As String
		Get
			Return Me._DEPO_CODIGO
		End Get
		Set
			If (String.Equals(Me._DEPO_CODIGO, value) = false) Then
				Me.OnDEPO_CODIGOChanging(value)
				Me.SendPropertyChanging
				Me._DEPO_CODIGO = value
				Me.SendPropertyChanged("DEPO_CODIGO")
				Me.OnDEPO_CODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DEPOSITOS_PRODUCTOS", Storage:="_PRODUCTOS", ThisKey:="ID_DEPOSITO", OtherKey:="ID_DEPOSITO")>  _
	Public Property PRODUCTOS() As EntitySet(Of PRODUCTOS)
		Get
			Return Me._PRODUCTOS
		End Get
		Set
			Me._PRODUCTOS.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PRODUCTOS(ByVal entity As PRODUCTOS)
		Me.SendPropertyChanging
		entity.DEPOSITOS = Me
	End Sub
	
	Private Sub detach_PRODUCTOS(ByVal entity As PRODUCTOS)
		Me.SendPropertyChanging
		entity.DEPOSITOS = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EQUIPOS_X_SERVICIOS")>  _
Partial Public Class EQUIPOS_X_SERVICIOS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_EQUI_X_SERV As Integer
	
	Private _ID_PRODUCTO As Integer
	
	Private _EXS_CANTIDAD As Integer
	
	Private _EXS_FECHA_INSTALACION As Date
	
	Private _ID_SERVICIO As Integer
	
	Private _PRODUCTOS As EntityRef(Of PRODUCTOS)
	
	Private _SERVICIOS As EntityRef(Of SERVICIOS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_EQUI_X_SERVChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_EQUI_X_SERVChanged()
    End Sub
    Partial Private Sub OnID_PRODUCTOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PRODUCTOChanged()
    End Sub
    Partial Private Sub OnEXS_CANTIDADChanging(value As Integer)
    End Sub
    Partial Private Sub OnEXS_CANTIDADChanged()
    End Sub
    Partial Private Sub OnEXS_FECHA_INSTALACIONChanging(value As Date)
    End Sub
    Partial Private Sub OnEXS_FECHA_INSTALACIONChanged()
    End Sub
    Partial Private Sub OnID_SERVICIOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SERVICIOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PRODUCTOS = CType(Nothing, EntityRef(Of PRODUCTOS))
		Me._SERVICIOS = CType(Nothing, EntityRef(Of SERVICIOS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_EQUI_X_SERV", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_EQUI_X_SERV() As Integer
		Get
			Return Me._ID_EQUI_X_SERV
		End Get
		Set
			If ((Me._ID_EQUI_X_SERV = value)  _
						= false) Then
				Me.OnID_EQUI_X_SERVChanging(value)
				Me.SendPropertyChanging
				Me._ID_EQUI_X_SERV = value
				Me.SendPropertyChanged("ID_EQUI_X_SERV")
				Me.OnID_EQUI_X_SERVChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PRODUCTO", DbType:="Int NOT NULL")>  _
	Public Property ID_PRODUCTO() As Integer
		Get
			Return Me._ID_PRODUCTO
		End Get
		Set
			If ((Me._ID_PRODUCTO = value)  _
						= false) Then
				If Me._PRODUCTOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PRODUCTOChanging(value)
				Me.SendPropertyChanging
				Me._ID_PRODUCTO = value
				Me.SendPropertyChanged("ID_PRODUCTO")
				Me.OnID_PRODUCTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXS_CANTIDAD", DbType:="Int NOT NULL")>  _
	Public Property EXS_CANTIDAD() As Integer
		Get
			Return Me._EXS_CANTIDAD
		End Get
		Set
			If ((Me._EXS_CANTIDAD = value)  _
						= false) Then
				Me.OnEXS_CANTIDADChanging(value)
				Me.SendPropertyChanging
				Me._EXS_CANTIDAD = value
				Me.SendPropertyChanged("EXS_CANTIDAD")
				Me.OnEXS_CANTIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EXS_FECHA_INSTALACION", DbType:="Date NOT NULL")>  _
	Public Property EXS_FECHA_INSTALACION() As Date
		Get
			Return Me._EXS_FECHA_INSTALACION
		End Get
		Set
			If ((Me._EXS_FECHA_INSTALACION = value)  _
						= false) Then
				Me.OnEXS_FECHA_INSTALACIONChanging(value)
				Me.SendPropertyChanging
				Me._EXS_FECHA_INSTALACION = value
				Me.SendPropertyChanged("EXS_FECHA_INSTALACION")
				Me.OnEXS_FECHA_INSTALACIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_SERVICIO", DbType:="Int NOT NULL")>  _
	Public Property ID_SERVICIO() As Integer
		Get
			Return Me._ID_SERVICIO
		End Get
		Set
			If ((Me._ID_SERVICIO = value)  _
						= false) Then
				If Me._SERVICIOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_SERVICIOChanging(value)
				Me.SendPropertyChanging
				Me._ID_SERVICIO = value
				Me.SendPropertyChanged("ID_SERVICIO")
				Me.OnID_SERVICIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PRODUCTOS_EQUIPOS_X_SERVICIOS", Storage:="_PRODUCTOS", ThisKey:="ID_PRODUCTO", OtherKey:="ID_PRODUCTO", IsForeignKey:=true)>  _
	Public Property PRODUCTOS() As PRODUCTOS
		Get
			Return Me._PRODUCTOS.Entity
		End Get
		Set
			Dim previousValue As PRODUCTOS = Me._PRODUCTOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PRODUCTOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PRODUCTOS.Entity = Nothing
					previousValue.EQUIPOS_X_SERVICIOS.Remove(Me)
				End If
				Me._PRODUCTOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EQUIPOS_X_SERVICIOS.Add(Me)
					Me._ID_PRODUCTO = value.ID_PRODUCTO
				Else
					Me._ID_PRODUCTO = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PRODUCTOS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SERVICIOS_EQUIPOS_X_SERVICIOS", Storage:="_SERVICIOS", ThisKey:="ID_SERVICIO", OtherKey:="ID_SERVICIO", IsForeignKey:=true)>  _
	Public Property SERVICIOS() As SERVICIOS
		Get
			Return Me._SERVICIOS.Entity
		End Get
		Set
			Dim previousValue As SERVICIOS = Me._SERVICIOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SERVICIOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SERVICIOS.Entity = Nothing
					previousValue.EQUIPOS_X_SERVICIOS.Remove(Me)
				End If
				Me._SERVICIOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EQUIPOS_X_SERVICIOS.Add(Me)
					Me._ID_SERVICIO = value.ID_SERVICIO
				Else
					Me._ID_SERVICIO = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SERVICIOS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FORMAS_DE_PAGO")>  _
Partial Public Class FORMAS_DE_PAGO
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_FORM_DE_PAGO As Integer
	
	Private _FDP_DESCRIPCION As String
	
	Private _VENTAS As EntitySet(Of VENTAS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_FORM_DE_PAGOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_FORM_DE_PAGOChanged()
    End Sub
    Partial Private Sub OnFDP_DESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnFDP_DESCRIPCIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._VENTAS = New EntitySet(Of VENTAS)(AddressOf Me.attach_VENTAS, AddressOf Me.detach_VENTAS)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_FORM_DE_PAGO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_FORM_DE_PAGO() As Integer
		Get
			Return Me._ID_FORM_DE_PAGO
		End Get
		Set
			If ((Me._ID_FORM_DE_PAGO = value)  _
						= false) Then
				Me.OnID_FORM_DE_PAGOChanging(value)
				Me.SendPropertyChanging
				Me._ID_FORM_DE_PAGO = value
				Me.SendPropertyChanged("ID_FORM_DE_PAGO")
				Me.OnID_FORM_DE_PAGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FDP_DESCRIPCION", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property FDP_DESCRIPCION() As String
		Get
			Return Me._FDP_DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._FDP_DESCRIPCION, value) = false) Then
				Me.OnFDP_DESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._FDP_DESCRIPCION = value
				Me.SendPropertyChanged("FDP_DESCRIPCION")
				Me.OnFDP_DESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FORMAS_DE_PAGO_VENTAS", Storage:="_VENTAS", ThisKey:="ID_FORM_DE_PAGO", OtherKey:="ID_FORM_DE_PAGO")>  _
	Public Property VENTAS() As EntitySet(Of VENTAS)
		Get
			Return Me._VENTAS
		End Get
		Set
			Me._VENTAS.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_VENTAS(ByVal entity As VENTAS)
		Me.SendPropertyChanging
		entity.FORMAS_DE_PAGO = Me
	End Sub
	
	Private Sub detach_VENTAS(ByVal entity As VENTAS)
		Me.SendPropertyChanging
		entity.FORMAS_DE_PAGO = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PROD_X_VTA")>  _
Partial Public Class PROD_X_VTA
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_PROD_X_VTA As Integer
	
	Private _ID_PRODUCTO As Integer
	
	Private _ID_VENTA As Integer
	
	Private _PXV_CANTIDAD As Integer
	
	Private _PXV_PRECIO_X_PRODUCTO As Decimal
	
	Private _VENTAS As EntityRef(Of VENTAS)
	
	Private _PRODUCTOS As EntityRef(Of PRODUCTOS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PROD_X_VTAChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PROD_X_VTAChanged()
    End Sub
    Partial Private Sub OnID_PRODUCTOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PRODUCTOChanged()
    End Sub
    Partial Private Sub OnID_VENTAChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_VENTAChanged()
    End Sub
    Partial Private Sub OnPXV_CANTIDADChanging(value As Integer)
    End Sub
    Partial Private Sub OnPXV_CANTIDADChanged()
    End Sub
    Partial Private Sub OnPXV_PRECIO_X_PRODUCTOChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPXV_PRECIO_X_PRODUCTOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._VENTAS = CType(Nothing, EntityRef(Of VENTAS))
		Me._PRODUCTOS = CType(Nothing, EntityRef(Of PRODUCTOS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PROD_X_VTA", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_PROD_X_VTA() As Integer
		Get
			Return Me._ID_PROD_X_VTA
		End Get
		Set
			If ((Me._ID_PROD_X_VTA = value)  _
						= false) Then
				Me.OnID_PROD_X_VTAChanging(value)
				Me.SendPropertyChanging
				Me._ID_PROD_X_VTA = value
				Me.SendPropertyChanged("ID_PROD_X_VTA")
				Me.OnID_PROD_X_VTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PRODUCTO", DbType:="Int NOT NULL")>  _
	Public Property ID_PRODUCTO() As Integer
		Get
			Return Me._ID_PRODUCTO
		End Get
		Set
			If ((Me._ID_PRODUCTO = value)  _
						= false) Then
				If Me._PRODUCTOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PRODUCTOChanging(value)
				Me.SendPropertyChanging
				Me._ID_PRODUCTO = value
				Me.SendPropertyChanged("ID_PRODUCTO")
				Me.OnID_PRODUCTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_VENTA", DbType:="Int NOT NULL")>  _
	Public Property ID_VENTA() As Integer
		Get
			Return Me._ID_VENTA
		End Get
		Set
			If ((Me._ID_VENTA = value)  _
						= false) Then
				If Me._VENTAS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_VENTAChanging(value)
				Me.SendPropertyChanging
				Me._ID_VENTA = value
				Me.SendPropertyChanged("ID_VENTA")
				Me.OnID_VENTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PXV_CANTIDAD", DbType:="Int NOT NULL")>  _
	Public Property PXV_CANTIDAD() As Integer
		Get
			Return Me._PXV_CANTIDAD
		End Get
		Set
			If ((Me._PXV_CANTIDAD = value)  _
						= false) Then
				Me.OnPXV_CANTIDADChanging(value)
				Me.SendPropertyChanging
				Me._PXV_CANTIDAD = value
				Me.SendPropertyChanged("PXV_CANTIDAD")
				Me.OnPXV_CANTIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PXV_PRECIO_X_PRODUCTO", DbType:="Decimal(7,2) NOT NULL")>  _
	Public Property PXV_PRECIO_X_PRODUCTO() As Decimal
		Get
			Return Me._PXV_PRECIO_X_PRODUCTO
		End Get
		Set
			If ((Me._PXV_PRECIO_X_PRODUCTO = value)  _
						= false) Then
				Me.OnPXV_PRECIO_X_PRODUCTOChanging(value)
				Me.SendPropertyChanging
				Me._PXV_PRECIO_X_PRODUCTO = value
				Me.SendPropertyChanged("PXV_PRECIO_X_PRODUCTO")
				Me.OnPXV_PRECIO_X_PRODUCTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="VENTAS_PROD_X_VTA", Storage:="_VENTAS", ThisKey:="ID_VENTA", OtherKey:="ID_VENTA", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property VENTAS() As VENTAS
		Get
			Return Me._VENTAS.Entity
		End Get
		Set
			Dim previousValue As VENTAS = Me._VENTAS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._VENTAS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._VENTAS.Entity = Nothing
					previousValue.PROD_X_VTA.Remove(Me)
				End If
				Me._VENTAS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PROD_X_VTA.Add(Me)
					Me._ID_VENTA = value.ID_VENTA
				Else
					Me._ID_VENTA = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("VENTAS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PRODUCTOS_PROD_X_VTA", Storage:="_PRODUCTOS", ThisKey:="ID_PRODUCTO", OtherKey:="ID_PRODUCTO", IsForeignKey:=true)>  _
	Public Property PRODUCTOS() As PRODUCTOS
		Get
			Return Me._PRODUCTOS.Entity
		End Get
		Set
			Dim previousValue As PRODUCTOS = Me._PRODUCTOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PRODUCTOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PRODUCTOS.Entity = Nothing
					previousValue.PROD_X_VTA.Remove(Me)
				End If
				Me._PRODUCTOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PROD_X_VTA.Add(Me)
					Me._ID_PRODUCTO = value.ID_PRODUCTO
				Else
					Me._ID_PRODUCTO = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PRODUCTOS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PRODUCTOS")>  _
Partial Public Class PRODUCTOS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_PRODUCTO As Integer
	
	Private _PROD_CODIGO As String
	
	Private _PROD_DESCRIPCION As String
	
	Private _PROD_PRECIO_COSTO As Decimal
	
	Private _PROD_PRECIO_VTA As Decimal
	
	Private _PROD_STOCK As Integer
	
	Private _ID_PROVEEDOR As Integer
	
	Private _ID_DEPOSITO As Integer
	
	Private _ID_PROD_TIPO As Integer
	
	Private _EQUIPOS_X_SERVICIOS As EntitySet(Of EQUIPOS_X_SERVICIOS)
	
	Private _PROD_X_VTA As EntitySet(Of PROD_X_VTA)
	
	Private _DEPOSITOS As EntityRef(Of DEPOSITOS)
	
	Private _PRODUCTOS_TIPOS As EntityRef(Of PRODUCTOS_TIPOS)
	
	Private _PROVEEDORES As EntityRef(Of PROVEEDORES)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PRODUCTOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PRODUCTOChanged()
    End Sub
    Partial Private Sub OnPROD_CODIGOChanging(value As String)
    End Sub
    Partial Private Sub OnPROD_CODIGOChanged()
    End Sub
    Partial Private Sub OnPROD_DESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnPROD_DESCRIPCIONChanged()
    End Sub
    Partial Private Sub OnPROD_PRECIO_COSTOChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPROD_PRECIO_COSTOChanged()
    End Sub
    Partial Private Sub OnPROD_PRECIO_VTAChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPROD_PRECIO_VTAChanged()
    End Sub
    Partial Private Sub OnPROD_STOCKChanging(value As Integer)
    End Sub
    Partial Private Sub OnPROD_STOCKChanged()
    End Sub
    Partial Private Sub OnID_PROVEEDORChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PROVEEDORChanged()
    End Sub
    Partial Private Sub OnID_DEPOSITOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_DEPOSITOChanged()
    End Sub
    Partial Private Sub OnID_PROD_TIPOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PROD_TIPOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EQUIPOS_X_SERVICIOS = New EntitySet(Of EQUIPOS_X_SERVICIOS)(AddressOf Me.attach_EQUIPOS_X_SERVICIOS, AddressOf Me.detach_EQUIPOS_X_SERVICIOS)
		Me._PROD_X_VTA = New EntitySet(Of PROD_X_VTA)(AddressOf Me.attach_PROD_X_VTA, AddressOf Me.detach_PROD_X_VTA)
		Me._DEPOSITOS = CType(Nothing, EntityRef(Of DEPOSITOS))
		Me._PRODUCTOS_TIPOS = CType(Nothing, EntityRef(Of PRODUCTOS_TIPOS))
		Me._PROVEEDORES = CType(Nothing, EntityRef(Of PROVEEDORES))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PRODUCTO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_PRODUCTO() As Integer
		Get
			Return Me._ID_PRODUCTO
		End Get
		Set
			If ((Me._ID_PRODUCTO = value)  _
						= false) Then
				Me.OnID_PRODUCTOChanging(value)
				Me.SendPropertyChanging
				Me._ID_PRODUCTO = value
				Me.SendPropertyChanged("ID_PRODUCTO")
				Me.OnID_PRODUCTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROD_CODIGO", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property PROD_CODIGO() As String
		Get
			Return Me._PROD_CODIGO
		End Get
		Set
			If (String.Equals(Me._PROD_CODIGO, value) = false) Then
				Me.OnPROD_CODIGOChanging(value)
				Me.SendPropertyChanging
				Me._PROD_CODIGO = value
				Me.SendPropertyChanged("PROD_CODIGO")
				Me.OnPROD_CODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROD_DESCRIPCION", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property PROD_DESCRIPCION() As String
		Get
			Return Me._PROD_DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._PROD_DESCRIPCION, value) = false) Then
				Me.OnPROD_DESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._PROD_DESCRIPCION = value
				Me.SendPropertyChanged("PROD_DESCRIPCION")
				Me.OnPROD_DESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROD_PRECIO_COSTO", DbType:="Decimal(7,2) NOT NULL")>  _
	Public Property PROD_PRECIO_COSTO() As Decimal
		Get
			Return Me._PROD_PRECIO_COSTO
		End Get
		Set
			If ((Me._PROD_PRECIO_COSTO = value)  _
						= false) Then
				Me.OnPROD_PRECIO_COSTOChanging(value)
				Me.SendPropertyChanging
				Me._PROD_PRECIO_COSTO = value
				Me.SendPropertyChanged("PROD_PRECIO_COSTO")
				Me.OnPROD_PRECIO_COSTOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROD_PRECIO_VTA", DbType:="Decimal(7,2) NOT NULL")>  _
	Public Property PROD_PRECIO_VTA() As Decimal
		Get
			Return Me._PROD_PRECIO_VTA
		End Get
		Set
			If ((Me._PROD_PRECIO_VTA = value)  _
						= false) Then
				Me.OnPROD_PRECIO_VTAChanging(value)
				Me.SendPropertyChanging
				Me._PROD_PRECIO_VTA = value
				Me.SendPropertyChanged("PROD_PRECIO_VTA")
				Me.OnPROD_PRECIO_VTAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROD_STOCK", DbType:="Int NOT NULL")>  _
	Public Property PROD_STOCK() As Integer
		Get
			Return Me._PROD_STOCK
		End Get
		Set
			If ((Me._PROD_STOCK = value)  _
						= false) Then
				Me.OnPROD_STOCKChanging(value)
				Me.SendPropertyChanging
				Me._PROD_STOCK = value
				Me.SendPropertyChanged("PROD_STOCK")
				Me.OnPROD_STOCKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PROVEEDOR", DbType:="Int NOT NULL")>  _
	Public Property ID_PROVEEDOR() As Integer
		Get
			Return Me._ID_PROVEEDOR
		End Get
		Set
			If ((Me._ID_PROVEEDOR = value)  _
						= false) Then
				If Me._PROVEEDORES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PROVEEDORChanging(value)
				Me.SendPropertyChanging
				Me._ID_PROVEEDOR = value
				Me.SendPropertyChanged("ID_PROVEEDOR")
				Me.OnID_PROVEEDORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_DEPOSITO", DbType:="Int NOT NULL")>  _
	Public Property ID_DEPOSITO() As Integer
		Get
			Return Me._ID_DEPOSITO
		End Get
		Set
			If ((Me._ID_DEPOSITO = value)  _
						= false) Then
				If Me._DEPOSITOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_DEPOSITOChanging(value)
				Me.SendPropertyChanging
				Me._ID_DEPOSITO = value
				Me.SendPropertyChanged("ID_DEPOSITO")
				Me.OnID_DEPOSITOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PROD_TIPO", DbType:="Int NOT NULL")>  _
	Public Property ID_PROD_TIPO() As Integer
		Get
			Return Me._ID_PROD_TIPO
		End Get
		Set
			If ((Me._ID_PROD_TIPO = value)  _
						= false) Then
				If Me._PRODUCTOS_TIPOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_PROD_TIPOChanging(value)
				Me.SendPropertyChanging
				Me._ID_PROD_TIPO = value
				Me.SendPropertyChanged("ID_PROD_TIPO")
				Me.OnID_PROD_TIPOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PRODUCTOS_EQUIPOS_X_SERVICIOS", Storage:="_EQUIPOS_X_SERVICIOS", ThisKey:="ID_PRODUCTO", OtherKey:="ID_PRODUCTO")>  _
	Public Property EQUIPOS_X_SERVICIOS() As EntitySet(Of EQUIPOS_X_SERVICIOS)
		Get
			Return Me._EQUIPOS_X_SERVICIOS
		End Get
		Set
			Me._EQUIPOS_X_SERVICIOS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PRODUCTOS_PROD_X_VTA", Storage:="_PROD_X_VTA", ThisKey:="ID_PRODUCTO", OtherKey:="ID_PRODUCTO")>  _
	Public Property PROD_X_VTA() As EntitySet(Of PROD_X_VTA)
		Get
			Return Me._PROD_X_VTA
		End Get
		Set
			Me._PROD_X_VTA.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DEPOSITOS_PRODUCTOS", Storage:="_DEPOSITOS", ThisKey:="ID_DEPOSITO", OtherKey:="ID_DEPOSITO", IsForeignKey:=true)>  _
	Public Property DEPOSITOS() As DEPOSITOS
		Get
			Return Me._DEPOSITOS.Entity
		End Get
		Set
			Dim previousValue As DEPOSITOS = Me._DEPOSITOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DEPOSITOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DEPOSITOS.Entity = Nothing
					previousValue.PRODUCTOS.Remove(Me)
				End If
				Me._DEPOSITOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PRODUCTOS.Add(Me)
					Me._ID_DEPOSITO = value.ID_DEPOSITO
				Else
					Me._ID_DEPOSITO = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("DEPOSITOS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PRODUCTOS_TIPOS_PRODUCTOS", Storage:="_PRODUCTOS_TIPOS", ThisKey:="ID_PROD_TIPO", OtherKey:="ID_PROD_TIPO", IsForeignKey:=true)>  _
	Public Property PRODUCTOS_TIPOS() As PRODUCTOS_TIPOS
		Get
			Return Me._PRODUCTOS_TIPOS.Entity
		End Get
		Set
			Dim previousValue As PRODUCTOS_TIPOS = Me._PRODUCTOS_TIPOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PRODUCTOS_TIPOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PRODUCTOS_TIPOS.Entity = Nothing
					previousValue.PRODUCTOS.Remove(Me)
				End If
				Me._PRODUCTOS_TIPOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PRODUCTOS.Add(Me)
					Me._ID_PROD_TIPO = value.ID_PROD_TIPO
				Else
					Me._ID_PROD_TIPO = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PRODUCTOS_TIPOS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PROVEEDORES_PRODUCTOS", Storage:="_PROVEEDORES", ThisKey:="ID_PROVEEDOR", OtherKey:="ID_PROVEEDOR", IsForeignKey:=true)>  _
	Public Property PROVEEDORES() As PROVEEDORES
		Get
			Return Me._PROVEEDORES.Entity
		End Get
		Set
			Dim previousValue As PROVEEDORES = Me._PROVEEDORES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PROVEEDORES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PROVEEDORES.Entity = Nothing
					previousValue.PRODUCTOS.Remove(Me)
				End If
				Me._PROVEEDORES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PRODUCTOS.Add(Me)
					Me._ID_PROVEEDOR = value.ID_PROVEEDOR
				Else
					Me._ID_PROVEEDOR = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PROVEEDORES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_EQUIPOS_X_SERVICIOS(ByVal entity As EQUIPOS_X_SERVICIOS)
		Me.SendPropertyChanging
		entity.PRODUCTOS = Me
	End Sub
	
	Private Sub detach_EQUIPOS_X_SERVICIOS(ByVal entity As EQUIPOS_X_SERVICIOS)
		Me.SendPropertyChanging
		entity.PRODUCTOS = Nothing
	End Sub
	
	Private Sub attach_PROD_X_VTA(ByVal entity As PROD_X_VTA)
		Me.SendPropertyChanging
		entity.PRODUCTOS = Me
	End Sub
	
	Private Sub detach_PROD_X_VTA(ByVal entity As PROD_X_VTA)
		Me.SendPropertyChanging
		entity.PRODUCTOS = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PRODUCTOS_TIPOS")>  _
Partial Public Class PRODUCTOS_TIPOS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_PROD_TIPO As Integer
	
	Private _PROD_TIPO_DESC As String
	
	Private _PROD_TIPO_CODIGO As String
	
	Private _PRODUCTOS As EntitySet(Of PRODUCTOS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PROD_TIPOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PROD_TIPOChanged()
    End Sub
    Partial Private Sub OnPROD_TIPO_DESCChanging(value As String)
    End Sub
    Partial Private Sub OnPROD_TIPO_DESCChanged()
    End Sub
    Partial Private Sub OnPROD_TIPO_CODIGOChanging(value As String)
    End Sub
    Partial Private Sub OnPROD_TIPO_CODIGOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PRODUCTOS = New EntitySet(Of PRODUCTOS)(AddressOf Me.attach_PRODUCTOS, AddressOf Me.detach_PRODUCTOS)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PROD_TIPO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_PROD_TIPO() As Integer
		Get
			Return Me._ID_PROD_TIPO
		End Get
		Set
			If ((Me._ID_PROD_TIPO = value)  _
						= false) Then
				Me.OnID_PROD_TIPOChanging(value)
				Me.SendPropertyChanging
				Me._ID_PROD_TIPO = value
				Me.SendPropertyChanged("ID_PROD_TIPO")
				Me.OnID_PROD_TIPOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROD_TIPO_DESC", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property PROD_TIPO_DESC() As String
		Get
			Return Me._PROD_TIPO_DESC
		End Get
		Set
			If (String.Equals(Me._PROD_TIPO_DESC, value) = false) Then
				Me.OnPROD_TIPO_DESCChanging(value)
				Me.SendPropertyChanging
				Me._PROD_TIPO_DESC = value
				Me.SendPropertyChanged("PROD_TIPO_DESC")
				Me.OnPROD_TIPO_DESCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROD_TIPO_CODIGO", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property PROD_TIPO_CODIGO() As String
		Get
			Return Me._PROD_TIPO_CODIGO
		End Get
		Set
			If (String.Equals(Me._PROD_TIPO_CODIGO, value) = false) Then
				Me.OnPROD_TIPO_CODIGOChanging(value)
				Me.SendPropertyChanging
				Me._PROD_TIPO_CODIGO = value
				Me.SendPropertyChanged("PROD_TIPO_CODIGO")
				Me.OnPROD_TIPO_CODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PRODUCTOS_TIPOS_PRODUCTOS", Storage:="_PRODUCTOS", ThisKey:="ID_PROD_TIPO", OtherKey:="ID_PROD_TIPO")>  _
	Public Property PRODUCTOS() As EntitySet(Of PRODUCTOS)
		Get
			Return Me._PRODUCTOS
		End Get
		Set
			Me._PRODUCTOS.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PRODUCTOS(ByVal entity As PRODUCTOS)
		Me.SendPropertyChanging
		entity.PRODUCTOS_TIPOS = Me
	End Sub
	
	Private Sub detach_PRODUCTOS(ByVal entity As PRODUCTOS)
		Me.SendPropertyChanging
		entity.PRODUCTOS_TIPOS = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PROVEEDORES")>  _
Partial Public Class PROVEEDORES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_PROVEEDOR As Integer
	
	Private _PROV_NOMBRE As String
	
	Private _PROV_DIRECCION As String
	
	Private _PROV_TEL_1 As String
	
	Private _PROV_TEL_2 As String
	
	Private _PROV_MAIL As String
	
	Private _PROV_URL As String
	
	Private _PROV_LOCALIDAD As String
	
	Private _PROV_CODIGO As String
	
	Private _PRODUCTOS As EntitySet(Of PRODUCTOS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_PROVEEDORChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_PROVEEDORChanged()
    End Sub
    Partial Private Sub OnPROV_NOMBREChanging(value As String)
    End Sub
    Partial Private Sub OnPROV_NOMBREChanged()
    End Sub
    Partial Private Sub OnPROV_DIRECCIONChanging(value As String)
    End Sub
    Partial Private Sub OnPROV_DIRECCIONChanged()
    End Sub
    Partial Private Sub OnPROV_TEL_1Changing(value As String)
    End Sub
    Partial Private Sub OnPROV_TEL_1Changed()
    End Sub
    Partial Private Sub OnPROV_TEL_2Changing(value As String)
    End Sub
    Partial Private Sub OnPROV_TEL_2Changed()
    End Sub
    Partial Private Sub OnPROV_MAILChanging(value As String)
    End Sub
    Partial Private Sub OnPROV_MAILChanged()
    End Sub
    Partial Private Sub OnPROV_URLChanging(value As String)
    End Sub
    Partial Private Sub OnPROV_URLChanged()
    End Sub
    Partial Private Sub OnPROV_LOCALIDADChanging(value As String)
    End Sub
    Partial Private Sub OnPROV_LOCALIDADChanged()
    End Sub
    Partial Private Sub OnPROV_CODIGOChanging(value As String)
    End Sub
    Partial Private Sub OnPROV_CODIGOChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PRODUCTOS = New EntitySet(Of PRODUCTOS)(AddressOf Me.attach_PRODUCTOS, AddressOf Me.detach_PRODUCTOS)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_PROVEEDOR", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_PROVEEDOR() As Integer
		Get
			Return Me._ID_PROVEEDOR
		End Get
		Set
			If ((Me._ID_PROVEEDOR = value)  _
						= false) Then
				Me.OnID_PROVEEDORChanging(value)
				Me.SendPropertyChanging
				Me._ID_PROVEEDOR = value
				Me.SendPropertyChanged("ID_PROVEEDOR")
				Me.OnID_PROVEEDORChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROV_NOMBRE", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PROV_NOMBRE() As String
		Get
			Return Me._PROV_NOMBRE
		End Get
		Set
			If (String.Equals(Me._PROV_NOMBRE, value) = false) Then
				Me.OnPROV_NOMBREChanging(value)
				Me.SendPropertyChanging
				Me._PROV_NOMBRE = value
				Me.SendPropertyChanged("PROV_NOMBRE")
				Me.OnPROV_NOMBREChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROV_DIRECCION", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property PROV_DIRECCION() As String
		Get
			Return Me._PROV_DIRECCION
		End Get
		Set
			If (String.Equals(Me._PROV_DIRECCION, value) = false) Then
				Me.OnPROV_DIRECCIONChanging(value)
				Me.SendPropertyChanging
				Me._PROV_DIRECCION = value
				Me.SendPropertyChanged("PROV_DIRECCION")
				Me.OnPROV_DIRECCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROV_TEL_1", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property PROV_TEL_1() As String
		Get
			Return Me._PROV_TEL_1
		End Get
		Set
			If (String.Equals(Me._PROV_TEL_1, value) = false) Then
				Me.OnPROV_TEL_1Changing(value)
				Me.SendPropertyChanging
				Me._PROV_TEL_1 = value
				Me.SendPropertyChanged("PROV_TEL_1")
				Me.OnPROV_TEL_1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROV_TEL_2", DbType:="VarChar(15)")>  _
	Public Property PROV_TEL_2() As String
		Get
			Return Me._PROV_TEL_2
		End Get
		Set
			If (String.Equals(Me._PROV_TEL_2, value) = false) Then
				Me.OnPROV_TEL_2Changing(value)
				Me.SendPropertyChanging
				Me._PROV_TEL_2 = value
				Me.SendPropertyChanged("PROV_TEL_2")
				Me.OnPROV_TEL_2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROV_MAIL", DbType:="VarChar(50)")>  _
	Public Property PROV_MAIL() As String
		Get
			Return Me._PROV_MAIL
		End Get
		Set
			If (String.Equals(Me._PROV_MAIL, value) = false) Then
				Me.OnPROV_MAILChanging(value)
				Me.SendPropertyChanging
				Me._PROV_MAIL = value
				Me.SendPropertyChanged("PROV_MAIL")
				Me.OnPROV_MAILChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROV_URL", DbType:="VarChar(100)")>  _
	Public Property PROV_URL() As String
		Get
			Return Me._PROV_URL
		End Get
		Set
			If (String.Equals(Me._PROV_URL, value) = false) Then
				Me.OnPROV_URLChanging(value)
				Me.SendPropertyChanging
				Me._PROV_URL = value
				Me.SendPropertyChanged("PROV_URL")
				Me.OnPROV_URLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROV_LOCALIDAD", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PROV_LOCALIDAD() As String
		Get
			Return Me._PROV_LOCALIDAD
		End Get
		Set
			If (String.Equals(Me._PROV_LOCALIDAD, value) = false) Then
				Me.OnPROV_LOCALIDADChanging(value)
				Me.SendPropertyChanging
				Me._PROV_LOCALIDAD = value
				Me.SendPropertyChanged("PROV_LOCALIDAD")
				Me.OnPROV_LOCALIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROV_CODIGO", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property PROV_CODIGO() As String
		Get
			Return Me._PROV_CODIGO
		End Get
		Set
			If (String.Equals(Me._PROV_CODIGO, value) = false) Then
				Me.OnPROV_CODIGOChanging(value)
				Me.SendPropertyChanging
				Me._PROV_CODIGO = value
				Me.SendPropertyChanged("PROV_CODIGO")
				Me.OnPROV_CODIGOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PROVEEDORES_PRODUCTOS", Storage:="_PRODUCTOS", ThisKey:="ID_PROVEEDOR", OtherKey:="ID_PROVEEDOR")>  _
	Public Property PRODUCTOS() As EntitySet(Of PRODUCTOS)
		Get
			Return Me._PRODUCTOS
		End Get
		Set
			Me._PRODUCTOS.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PRODUCTOS(ByVal entity As PRODUCTOS)
		Me.SendPropertyChanging
		entity.PROVEEDORES = Me
	End Sub
	
	Private Sub detach_PRODUCTOS(ByVal entity As PRODUCTOS)
		Me.SendPropertyChanging
		entity.PROVEEDORES = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SERVICIOS")>  _
Partial Public Class SERVICIOS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_SERVICIO As Integer
	
	Private _ID_CLIENTE As Integer
	
	Private _SERV_DIRECCION As String
	
	Private _SERV_LOCALIDAD As String
	
	Private _SERV_TEL_1 As String
	
	Private _SERV_TEL_2 As String
	
	Private _SERV_TEL_3 As String
	
	Private _SERV_DESCRIPCION As String
	
	Private _EQUIPOS_X_SERVICIOS As EntitySet(Of EQUIPOS_X_SERVICIOS)
	
	Private _CLIENTES As EntityRef(Of CLIENTES)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_SERVICIOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_SERVICIOChanged()
    End Sub
    Partial Private Sub OnID_CLIENTEChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_CLIENTEChanged()
    End Sub
    Partial Private Sub OnSERV_DIRECCIONChanging(value As String)
    End Sub
    Partial Private Sub OnSERV_DIRECCIONChanged()
    End Sub
    Partial Private Sub OnSERV_LOCALIDADChanging(value As String)
    End Sub
    Partial Private Sub OnSERV_LOCALIDADChanged()
    End Sub
    Partial Private Sub OnSERV_TEL_1Changing(value As String)
    End Sub
    Partial Private Sub OnSERV_TEL_1Changed()
    End Sub
    Partial Private Sub OnSERV_TEL_2Changing(value As String)
    End Sub
    Partial Private Sub OnSERV_TEL_2Changed()
    End Sub
    Partial Private Sub OnSERV_TEL_3Changing(value As String)
    End Sub
    Partial Private Sub OnSERV_TEL_3Changed()
    End Sub
    Partial Private Sub OnSERV_DESCRIPCIONChanging(value As String)
    End Sub
    Partial Private Sub OnSERV_DESCRIPCIONChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._EQUIPOS_X_SERVICIOS = New EntitySet(Of EQUIPOS_X_SERVICIOS)(AddressOf Me.attach_EQUIPOS_X_SERVICIOS, AddressOf Me.detach_EQUIPOS_X_SERVICIOS)
		Me._CLIENTES = CType(Nothing, EntityRef(Of CLIENTES))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_SERVICIO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_SERVICIO() As Integer
		Get
			Return Me._ID_SERVICIO
		End Get
		Set
			If ((Me._ID_SERVICIO = value)  _
						= false) Then
				Me.OnID_SERVICIOChanging(value)
				Me.SendPropertyChanging
				Me._ID_SERVICIO = value
				Me.SendPropertyChanged("ID_SERVICIO")
				Me.OnID_SERVICIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_CLIENTE", DbType:="Int NOT NULL")>  _
	Public Property ID_CLIENTE() As Integer
		Get
			Return Me._ID_CLIENTE
		End Get
		Set
			If ((Me._ID_CLIENTE = value)  _
						= false) Then
				If Me._CLIENTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnID_CLIENTEChanging(value)
				Me.SendPropertyChanging
				Me._ID_CLIENTE = value
				Me.SendPropertyChanged("ID_CLIENTE")
				Me.OnID_CLIENTEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERV_DIRECCION", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SERV_DIRECCION() As String
		Get
			Return Me._SERV_DIRECCION
		End Get
		Set
			If (String.Equals(Me._SERV_DIRECCION, value) = false) Then
				Me.OnSERV_DIRECCIONChanging(value)
				Me.SendPropertyChanging
				Me._SERV_DIRECCION = value
				Me.SendPropertyChanged("SERV_DIRECCION")
				Me.OnSERV_DIRECCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERV_LOCALIDAD", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SERV_LOCALIDAD() As String
		Get
			Return Me._SERV_LOCALIDAD
		End Get
		Set
			If (String.Equals(Me._SERV_LOCALIDAD, value) = false) Then
				Me.OnSERV_LOCALIDADChanging(value)
				Me.SendPropertyChanging
				Me._SERV_LOCALIDAD = value
				Me.SendPropertyChanged("SERV_LOCALIDAD")
				Me.OnSERV_LOCALIDADChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERV_TEL_1", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property SERV_TEL_1() As String
		Get
			Return Me._SERV_TEL_1
		End Get
		Set
			If (String.Equals(Me._SERV_TEL_1, value) = false) Then
				Me.OnSERV_TEL_1Changing(value)
				Me.SendPropertyChanging
				Me._SERV_TEL_1 = value
				Me.SendPropertyChanged("SERV_TEL_1")
				Me.OnSERV_TEL_1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERV_TEL_2", DbType:="VarChar(15)")>  _
	Public Property SERV_TEL_2() As String
		Get
			Return Me._SERV_TEL_2
		End Get
		Set
			If (String.Equals(Me._SERV_TEL_2, value) = false) Then
				Me.OnSERV_TEL_2Changing(value)
				Me.SendPropertyChanging
				Me._SERV_TEL_2 = value
				Me.SendPropertyChanged("SERV_TEL_2")
				Me.OnSERV_TEL_2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERV_TEL_3", DbType:="VarChar(15)")>  _
	Public Property SERV_TEL_3() As String
		Get
			Return Me._SERV_TEL_3
		End Get
		Set
			If (String.Equals(Me._SERV_TEL_3, value) = false) Then
				Me.OnSERV_TEL_3Changing(value)
				Me.SendPropertyChanging
				Me._SERV_TEL_3 = value
				Me.SendPropertyChanged("SERV_TEL_3")
				Me.OnSERV_TEL_3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SERV_DESCRIPCION", DbType:="VarChar(200)")>  _
	Public Property SERV_DESCRIPCION() As String
		Get
			Return Me._SERV_DESCRIPCION
		End Get
		Set
			If (String.Equals(Me._SERV_DESCRIPCION, value) = false) Then
				Me.OnSERV_DESCRIPCIONChanging(value)
				Me.SendPropertyChanging
				Me._SERV_DESCRIPCION = value
				Me.SendPropertyChanged("SERV_DESCRIPCION")
				Me.OnSERV_DESCRIPCIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SERVICIOS_EQUIPOS_X_SERVICIOS", Storage:="_EQUIPOS_X_SERVICIOS", ThisKey:="ID_SERVICIO", OtherKey:="ID_SERVICIO")>  _
	Public Property EQUIPOS_X_SERVICIOS() As EntitySet(Of EQUIPOS_X_SERVICIOS)
		Get
			Return Me._EQUIPOS_X_SERVICIOS
		End Get
		Set
			Me._EQUIPOS_X_SERVICIOS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CLIENTES_SERVICIOS", Storage:="_CLIENTES", ThisKey:="ID_CLIENTE", OtherKey:="ID_CLIENTE", IsForeignKey:=true)>  _
	Public Property CLIENTES() As CLIENTES
		Get
			Return Me._CLIENTES.Entity
		End Get
		Set
			Dim previousValue As CLIENTES = Me._CLIENTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CLIENTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CLIENTES.Entity = Nothing
					previousValue.SERVICIOS.Remove(Me)
				End If
				Me._CLIENTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SERVICIOS.Add(Me)
					Me._ID_CLIENTE = value.ID_CLIENTE
				Else
					Me._ID_CLIENTE = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CLIENTES")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_EQUIPOS_X_SERVICIOS(ByVal entity As EQUIPOS_X_SERVICIOS)
		Me.SendPropertyChanging
		entity.SERVICIOS = Me
	End Sub
	
	Private Sub detach_EQUIPOS_X_SERVICIOS(ByVal entity As EQUIPOS_X_SERVICIOS)
		Me.SendPropertyChanging
		entity.SERVICIOS = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.USUARIOS")>  _
Partial Public Class USUARIOS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID_USUARIO As Integer
	
	Private _USU_USUARIO As String
	
	Private _USU_CONTRASEÑA As String
	
	Private _USU_PERFIL As String
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnID_USUARIOChanging(value As Integer)
    End Sub
    Partial Private Sub OnID_USUARIOChanged()
    End Sub
    Partial Private Sub OnUSU_USUARIOChanging(value As String)
    End Sub
    Partial Private Sub OnUSU_USUARIOChanged()
    End Sub
    Partial Private Sub OnUSU_CONTRASEÑAChanging(value As String)
    End Sub
    Partial Private Sub OnUSU_CONTRASEÑAChanged()
    End Sub
    Partial Private Sub OnUSU_PERFILChanging(value As String)
    End Sub
    Partial Private Sub OnUSU_PERFILChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID_USUARIO", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID_USUARIO() As Integer
		Get
			Return Me._ID_USUARIO
		End Get
		Set
			If ((Me._ID_USUARIO = value)  _
						= false) Then
				Me.OnID_USUARIOChanging(value)
				Me.SendPropertyChanging
				Me._ID_USUARIO = value
				Me.SendPropertyChanged("ID_USUARIO")
				Me.OnID_USUARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USU_USUARIO", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property USU_USUARIO() As String
		Get
			Return Me._USU_USUARIO
		End Get
		Set
			If (String.Equals(Me._USU_USUARIO, value) = false) Then
				Me.OnUSU_USUARIOChanging(value)
				Me.SendPropertyChanging
				Me._USU_USUARIO = value
				Me.SendPropertyChanged("USU_USUARIO")
				Me.OnUSU_USUARIOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USU_CONTRASEÑA", DbType:="VarChar(8) NOT NULL", CanBeNull:=false)>  _
	Public Property USU_CONTRASEÑA() As String
		Get
			Return Me._USU_CONTRASEÑA
		End Get
		Set
			If (String.Equals(Me._USU_CONTRASEÑA, value) = false) Then
				Me.OnUSU_CONTRASEÑAChanging(value)
				Me.SendPropertyChanging
				Me._USU_CONTRASEÑA = value
				Me.SendPropertyChanged("USU_CONTRASEÑA")
				Me.OnUSU_CONTRASEÑAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USU_PERFIL", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property USU_PERFIL() As String
		Get
			Return Me._USU_PERFIL
		End Get
		Set
			If (String.Equals(Me._USU_PERFIL, value) = false) Then
				Me.OnUSU_PERFILChanging(value)
				Me.SendPropertyChanging
				Me._USU_PERFIL = value
				Me.SendPropertyChanged("USU_PERFIL")
				Me.OnUSU_PERFILChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
